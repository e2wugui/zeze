<?xml version="1.0" encoding="utf-8"?>

<solution name="Game" ModuleIdAllowRanges="1-1000">
	<import file="solution.linkd.xml"/>
	<import file="../ZezeJava/solution.zeze.xml"/>

	<module name="Login" id="1" hot="true">
		<enum name="ResultCodeCreateRoleDuplicateRoleName" value="1"/>

		<bean name="BCreateRole">
			<variable id="1" name="Name" type="string"/>
		</bean>

		<bean name="BRole">
			<variable id="1" name="Id" type="long"/>
			<variable id="2" name="Name" type="string"/>
		</bean>

		<bean name="BRoles">
			<variable id="1" name="RoleList" type="list" value="BRole"/>
			<variable id="2" name="LastLoginRoleId" type="long"/>
		</bean>

		<rpc name="CreateRole" argument="BCreateRole" result="BRole" handle="server"/>
		<rpc name="GetRoleList" result="BRoles" handle="server"/>

		<bean name="BRoleId">
			<variable id="1" name="Id" type="long"/>
		</bean>

		<bean name="BAccount">
			<variable id="1" name="Roles" type="set[long]"/>
			<variable id="2" name="LastLoginRoleId" type="long"/>
		</bean>
		<table name="taccount" key="string" value="BAccount"/>
		<table name="trole" key="long" value="BRole"/>
		<table name="trolename" key="string" value="BRoleId"/> rolename to roleid. duplicate name check
	</module>

	<module name="Item" id="3" hot="true">
		<bean name="BFoodExtra">
			<variable id="1" name="Ammount" type="int"/>
		</bean>
		<bean name="BHorseExtra">
			<variable id="1" name="Speed" type="int"/>
		</bean>

		<!-- 不需要定义自己的 table，一般物品都存储在 Bag 中。 -->
	</module>

	<module name="Fight" id="4" hot="true">
		<bean name="BFighter"> 战斗相关属性，用于技能等。
			<variable id="1" name="Attack" type="float"/>
			<variable id="2" name="Defence" type="float"/>
		</bean>
		<beankey name="BFighterId">
			<enum name="TypeRole" value="1"/>
			<enum name="TypeMonster" value="2"/>
			<enum name="TypePet" value="2"/>
			...

			<variable id="1" name="Type" type="int"/> 战斗对象类型
			<variable id="2" name="InstanceId" type="long"/> 战斗对象实例id，根据type含义不一样。
		</beankey>
		<table name="tfighters" key="BFighterId" value="BFighter"/> key is fighter id. 战斗属性是计算值，每次登录或改变时重新计算。

		<rpc name="AreYouFight" handle="client"/>
	</module>

	<module name="Skill" id="5" hot="true">
		<bean name="BSkill">
			<variable id="1" name="Id" type="int"/>
			<variable id="2" name="Extra" type="dynamic">
				<value bean="BSkillAttackExtra"/>
			</variable>
		</bean>
		<bean name="BSkills">
			<variable id="1" name="Skills" type="map" key="int" value="BSkill"/>
		</bean>
		<bean name="BSkillAttackExtra">
		</bean>

		<table name="tskills" key="long" value="BSkills"/>
	</module>

	<module name="Buf" id="6" hot="true">
		<!-- buf 应该尽量通过配置控制：冲突，覆盖，增加属性，生命期等 -->
		<bean name="BBuf">
			<variable id="1" name="Id" type="int"/>
			<variable id="2" name="AttachTime" type="long"/> 加入时间
			<variable id="3" name="ContinueTime" type="long"/> 持续时间
			<variable id="4" name="Extra" type="dynamic"> 保存具体buf的不同属性
				<value bean="BBufExtra"/>
			</variable>
		</bean>
		<bean name="BBufs">
			<variable id="1" name="Bufs" type="map" key="int" value="BBuf"/>
		</bean>
		<table name="tbufs" key="long" value="BBufs"/>

		<bean name="BBufExtra">
			<!-- 随便定义一个bean，不知道填什么扩展属性 -->
		</bean>

		<bean name="BBufChanged">
			<enum name="ChangeTagNormalChanged" value="0"/> 普通增量修改。
			<enum name="ChangeTagRecordIsRemoved" value="1"/> 整个记录删除了。
			<enum name="ChangeTagRecordChanged" value="2"/> 整个记录发生了变更，需要先清除本地数据，再替换进去。

			<variable id="1" name="Replace" type="map" key="int" value="BBuf"/> key is bufId
			<variable id="2" name="Remove" type="set" value="int"/> key is bufId
			<variable id="3" name="ChangeTag" type="int"/>
		</bean>

		<protocol name="SChanged" argument="BBufChanged" handle="client"/> 所有的buf改变都通过这个协议发送，通过ChangeListener订阅。
	</module>

	<module name="Equip" id="7" hot="true">
		<enum name="ResultCodeCannotEquip"   value="1"/>
		<enum name="ResultCodeItemNotFound"  value="2"/>
		<enum name="ResultCodeBagIsFull"     value="3"/>
		<enum name="ResultCodeEquipNotFound" value="4"/>
		
		<bean name="BRetreatTestLocal">
			<variable id="1" name="VarInt1" type="int"/>
		</bean>

		<bean name="BEquipement"> 穿上装备
			<variable id="1" name="BagPos" type="int"/>
		</bean>
		<bean name="BUnequipement"> 取下装备
			<variable id="1" name="EquipPos" type="int"/>
		</bean>

		<rpc name="Equipement" argument="BEquipement" handle="server"/>
		<rpc name="Unequipement" argument="BUnequipement" handle="server"/>

		<bean name="BItem">
			<variable id="1" name="Id" type="int"/>
			<variable id="2" name="Number" type="int"/>
			<variable id="3" name="Extra" type="dynamic">
				<value bean="Game.Item.BHorseExtra"/>
				<value bean="Game.Item.BFoodExtra"/>
				<value bean="Game.Equip.BEquipExtra"/>
			</variable>
		</bean>
		<bean name="BChangedResult">
			<enum name="ChangeTagNormalChanged" value="0"/> 普通增量修改。
			<enum name="ChangeTagRecordIsRemoved" value="1"/> 整个记录删除了。
			<enum name="ChangeTagRecordChanged" value="2"/> 整个记录发生了变更，需要先清除本地数据，再替换进去。

			<variable id="1" name="ItemsReplace" type="map" key="int" value="BItem"/> key is position
			<variable id="2" name="ItemsRemove" type="set" value="int"/> key is position
			<variable id="3" name="ChangeTag" type="int"/>
		</bean>
		<protocol name="SEquipement" argument="BChangedResult" handle="client"/>

		<bean name="BEquipExtra">
			<variable id="1" name="Attack" type="int"/>
			<variable id="2" name="Defence" type="int"/>
			<variable id="4" name="HotAddVar" type="int"/> 新版热更模块增加这个变量
		</bean>

		<bean name="BEquips">
			<variable id="1" name="Items" type="map" key="int" value="BItem"/> key is equip position
		</bean>
		<table name="tequip" key="long" value="BEquips"/>
		<table name="tHotAdd" key="long" value="BEquipExtra"/> 新版热更模块增加这张表
		<table name="tHotTest" key="long" value="BEquipExtra"/> 新版热更模块修改这个这张表的Value结构定义。

		<bean name="BReportLogin">
			<variable id="1" name="RoleId" type="long"/>
		</bean>
		<rpc name="ReportLogin" argument="BReportLogin" handle="server"/>

		<rpc name="SendHot" argument="BEquipExtra" handle="server"/>
		<rpc name="SendHotAdd" argument="BEquipExtra" handle="server"/>
		
		<table name="tMemoryToNormal" key="long" value="BEquipExtra"/> 不会倒数据，清空，正常访问即可。
		<table name="tNormalToMemory" key="long" value="BEquipExtra" memory="true"/> 不会倒数据，清空，正常访问即可。
		<table name="tMemoryRetreat" key="long" value="BEquipExtra" memory="true"/> 会重建bean

		<bean name="BRelational">
			<variable id="2" name="Name" type="string"/>
		</bean>
		<table name="tRelationalTest" key="long" value="BRelational" RelationalMapping="true"/>
	</module>

	<module name="Map" id="8">
		<bean name="BEnterWorldNow">
			<variable id="1" name="MapInstanceId" type="int"/>
			<!-- role postion -->
			<variable id="2" name="x" type="float"/>
			<variable id="3" name="y" type="float"/>
			<variable id="4" name="z" type="float"/>
			<!-- parameter for client resource -->
			<variable id="5" name="ResouceId" type="int"/>
		</bean>
		<bean name="BEnterWorldDone">
			<variable id="1" name="MapInstanceId" type="int"/>
		</bean>

		<protocol name="CEnterWorld" handle="server"/> no argument. all in server
		<protocol name="SEnterWorldNow" argument="BEnterWorldNow" handle="client"/>
		<protocol name="CEnterWorldDone" argument="BEnterWorldDone" handle="server"/> client load resource done
	</module>

	<module name="Rank" id="9">
		<beankey name="BConcurrentKey">
			<enum name="RankTypeGold" value="1"/>

			<enum name="TimeTypeTotal"     value="0"/> 所有时间
			<enum name="TimeTypeDay"       value="1"/> 每天：Year为当前时间的年份，Offset为天
			<enum name="TimeTypeWeek"      value="2"/> 每周：Year为当前时间的年份，Offset为周
			<enum name="TimeTypeSeason"    value="3"/> 每季：Year为当前时间的年份，Offset为季
			<enum name="TimeTypeYear"      value="4"/> 每年：Year为当前时间的年份，Offset为0
			<enum name="TimeTypeCustomize" value="5"/> 自定义：此时Offset是自定义Id，Year为0

			<variable id="1" name="RankType"     type="int"/>
			<variable id="2" name="ConcurrentId" type="int"/> = hash % ConcurrentLevel
			<variable id="3" name="TimeType"     type="int"/>
			<variable id="4" name="Year"         type="int"/>
			<variable id="5" name="Offset"       type="long"/> 根据TimeType，含义不同
		</beankey>

		<bean name="BRankValue">
			<variable id="1" name="RoleId"     type="long"/>
			<variable id="2" name="Value"      type="long"/> 含义由 BConcurrentKey.RankType 决定
			<variable id="3" name="ValueEx"    type="binary"/> 排名更多自定义数据。
			<variable id="4" name="AwardTaken" type="bool"/> 奖励已经获取。当开始领奖时，榜单不能再更新。这个变量可用于有时效的排行榜。
		</bean>

		<bean name="BRankList">
			<variable id="1" name="RankList"  type="list" value="BRankValue"/>
		</bean>

		<table name="trank" key="BConcurrentKey" value="BRankList"/>

		<bean name="BRankCounter">
			<variable id="1" name="Value" type="long"/>
		</bean>

		<bean name="BRankCounters">
			<variable id="1" name="Counters" type="map" key="BConcurrentKey" value="BRankCounter"/>
		</bean>

		<table name="trankcounters" key="long" value="BRankCounters"/> roleId to counters

		<bean name="BGetRankList">
			<variable id="1" name="RankType" type="int"/> BConcurrentKey.RankTypeXXX
			<variable id="2" name="TimeType" type="int"/> BConcurrentKey.TimeTypeXXX
		</bean>

		<bean name="BRankListResult">
			<variable id="1" name="RankType"  type="int"/>
			<variable id="2" name="RankList"  type="list" value="BRankValue"/>
		</bean>

		<protocol name="CGetRankList" argument="BGetRankList" handle="server"/>
		<protocol name="SGetRankList" argument="BRankListResult" handle="client"/>

		<bean name="RRankList" RedirectResult="true"> 生成继承RedirectResult的全public字段的类(不是标准Bean),用于RedirectAll的结果类型
			<variable id="1" name="rankList"  type="BRankList"/> 构造时都会初始化,不能为null
		</bean>
		<bean name="TestToServerResult">
			<variable id="1" name="resultCode"  type="long"/> 类型是long,名字是resultCode是特殊字段,表示远程执行的结果,0表示正常,如果是超时或异常则可能得不到正确的其它字段值. 此字段是可选的
			<variable id="2" name="out"  type="int"/> 以下是其它的自定义字段
			<variable id="3" name="serverId"  type="int"/>
		</bean>
		<bean name="TestHashResult">
			<variable id="1" name="hash"  type="int"/>
			<variable id="2" name="out"  type="int"/>
			<variable id="3" name="serverId"  type="int"/>
			<variable id="4" name="b_oolean"  type="bool"/>
			<variable id="5" name="b_yte"  type="byte"/>
			<variable id="6" name="s_hort"  type="short"/>
			<variable id="7" name="f_loat"  type="float"/>
			<variable id="8" name="l_ong"  type="long"/>
			<variable id="9" name="d_ouble"  type="double"/>
			<variable id="10" name="s_tring"  type="string"/>
			<variable id="11" name="b_inary"  type="binary"/>
			<variable id="12" name="b_ean"  type="TestToServerResult"/>
		</bean>
		<bean name="TestToAllResult" RedirectResult="true">
			<variable id="1" name="out"  type="int"/>
		</bean>
	</module>

	<module name="Timer" id="11" hot="true">
		<bean name="BNodeRoot">
			<variable id="1" name="HeadNodeId" type="long"/>
			<variable id="2" name="TailNodeId" type="long"/>
			<variable id="3" name="LoadSerialNo" type="long"/> 每次启动加载时都会自增
		</bean>

		<table name="tNodeRoot" key="int" value="BNodeRoot" /> key is serverid 每一台server拥有自己的链表。

		<bean name="BTimer">
			<variable id="1" name="TimerId" type="long"/>
			<variable id="2" name="Name" type="string"/>
			<variable id="3" name="Delay" type="long"/> 首次延迟时间(毫秒)
			<variable id="4" name="Period" type="long"/> 周期时间(毫秒), -1表示只有首次延迟
			<variable id="5" name="RemainTimes" type="long"/> -1 表示不限次数。
		</bean>

		<bean name="BNode">
			<variable id="1" name="PrevNodeId" type="long"/>
			<variable id="2" name="NextNodeId" type="long"/>
			<variable id="3" name="Timers" type="map" key="long" value="BTimer"/> key is timerId, alloc by AutoKey("Game.Timer.TimerIdGenerator")
		</bean>

		<table name="tNodes" key="long" value="BNode"/> key is nodeId, alloc by AutoKey("Game.Timer.NodeIdGenerator")

		<bean name="BIndex">
			<variable id="1" name="ServerId" type="int"/>
			<variable id="2" name="NodeId" type="long"/>
		</bean>

		<table name="tIndexs" key="long" value="BIndex" /> key is timerId
	</module>

	<module name="LongSet" id="12" hot="true">
		<bean name="BNodeRoot">
			<variable id="1" name="HeadNodeId" type="long"/>
			<variable id="2" name="TailNodeId" type="long"/>
		</bean>
		<beankey name="NameValue">
			<variable id="1" name="Name" type="string"/>
			<variable id="2" name="Value" type="long"/>
		</beankey>
		<beankey name="Timestamp">
			<variable id="1" name="Time" type="long"/>
		</beankey>
		<bean name="BNode">
			<variable id="1" name="PrevNodeId" type="long"/>
			<variable id="2" name="NextNodeId" type="long"/>
			<variable id="3" name="Set" type="map" key="NameValue" value="Timestamp"/>
		</bean>
		<table name="tNodes" key="long" value="BNode"/>
		<table name="tNodeRoot" key="string" value="BNodeRoot"/>
		<bean name="BNodeId">
			<variable id="1" name="NodeId" type="long"/>
		</bean>
		<table name="tIndexs" key="string" value="BNodeId"/> key is "{name}#{value}"
	</module>

	<!--
	name 项目名字
	gendir 代码生成输出目录，默认是当前目录
	GenTables 选择生成哪些表格（Table），如果为空，那就生成那些没有配置gen属性的table，可以用','分开指定多个名字
	-->
	<project name="server" hot="true" GenDir="server/Gen" SrcDir="server/src" platform="java" GenTables="">
		<!--
		这里引用的模块不该定义协议，定义了也不会被生成，一般为纯逻辑或者数据库模块。
		<module ref="CommonModule"/>
		-->
		<!-- service 生成到 solution 名字空间下 -->
		<service name="Server" handle="server" base="Zeze.Arch.ProviderService">
			<module ref="Login"/>
			<module ref="Item"/>
			<module ref="Fight"/>
			<module ref="Skill"/>
			<module ref="Buf"/>
			<module ref="Equip"/>
			<module ref="Map" dynamic="true"/> 地图模块动态绑定。
			<module ref="Rank"/>
			<module ref="Timer"/>
			<module ref="LongSet"/>
		</service>

		<ModuleStartOrder>
		</ModuleStartOrder>

		<service name="ServerDirect" handle="server,client" base="Zeze.Arch.ProviderDirectService">
		</service>
	</project>

</solution>
