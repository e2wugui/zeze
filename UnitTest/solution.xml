<?xml version="1.0" encoding="utf-8"?>

<solution name="demo" ModuleIdAllowRanges="1-3,5">

	<bean name="Bean1">
		<enum name="Enum1" value="4" />
		<variable id="1" name="V1" type="int" default="1" /> bean1comm
		bean1line2
		<variable id="2" name="V2" type="map" key="int" value="int" /> bean1v2
		bean1v2line2
	</bean>

	<module name="Module1" id="1">
		<beankey name="AutoKey">
			<variable id="1" name="Name" type="string" /> 一般就是表名。
			<variable id="2" name="LocalId" type="long" />
		</beankey>

		<bean name="AutoValue">
			<variable id="1" name="Current" type="long" />
			<variable id="2" name="Name" type="string" />
			<variable id="3" name="LocalId" type="long" />
			<variable id="4" name="ListDynamic" type="list[dynamic]">
				<value bean="demo.Bean1" />
				<value bean="Simple" />
			</variable>
			<variable id="5" name="MapDynamic" type="map[long, dynamic]">
				<value bean="demo.Bean1" />
				<value bean="Simple" />
			</variable>
		</bean>

		<table name="tAutokey" key="AutoKey" value="AutoValue" />

		<bean name="Removed2">
			<variable id="1" name="int_1" type="int" /> com aa
		</bean>
		<bean name="Simple">
			<variable id="1" name="int_1" type="int" /> com aa
			<variable id="2" name="long2" type="long" /> com aa
			<variable id="3" name="string3" type="string" /> com aa
			<variable id="4" name="removed" type="Removed2" /> com aa
			<!-- <variable id="5" name="DenyCircle" type="Simple"/> com aa -->
			<variable id="5" name="AllowCircle" type="list[Simple]" /> com aa
		</bean>
		<bean name="Item" MappingClass="true">
			<variable id="14" name="Subclass" type="dynamic">
				<value bean="demo.Bean1:1" />
				<value bean="Simple:2" />
				<value bean="Food:3"/>
			</variable>
		</bean>
		<bean name="Food">
			<variable id="14" name="Subclass" type="dynamic">
				<value bean="demo.Bean1:1" />
				<value bean="Simple:2" />
			</variable>
		</bean>
		<bean name="Value" version="version" equals="true">
			<enum name="Enum1" value="4" comment="enum的注释"/>

			<variable id="1" name="int_1" type="int" AllowNegative="true" /> com aa
			<variable id="2" name="long2" type="long" /> com aa
			<variable id="3" name="string3" type="string" /> com aa
			<variable id="4" name="bool4" type="bool" /> com aa
			<variable id="5" name="short5" type="short" /> com aa
			<variable id="6" name="float6" type="float" /> com aa
			<variable id="7" name="double7" type="double" /> com aa
			<variable id="8" name="bytes8" type="binary" /> com aa
			<variable id="9" name="list9" type="list" value="demo.Bean1" /> com aa
			<variable id="10" name="set10" type="set" value="int" /> com aa
			<variable id="11" name="map11" type="map" key="long" value="demo.Module2.Value" /> com aa
			<variable id="12" name="bean12" type="Simple" /> simple
			<variable id="13" name="byte13" type="byte" /> com aa
			<variable id="14" name="dynamic14" type="dynamic">
				<value bean="demo.Bean1:1" />
				<value bean="Simple:2" />
			</variable>
			<variable id="15" name="map15" type="map" key="long" value="long" /> com aa
			<variable id="16" name="map16" type="map" key="Key" value="Simple" /> com aa

			<variable id="17" name="vector2" type="vector2" />
			<variable id="18" name="vector2Int" type="vector2int" />
			<variable id="19" name="vector3" type="vector3" />
			<variable id="20" name="vector3Int" type="vector3int" />
			<variable id="21" name="vector4" type="vector4" />
			<variable id="22" name="quaternion" type="quaternion" />

			<variable id="23" name="listVector2Int" type="list" value="vector2int"/>
			<variable id="24" name="map24" type="map[Key,Simple]" />
			<variable id="25" name="map25" type="map[Key,dynamic:Simple]" />
			<variable id="26" name="dynamic26" type="dynamic:Simple" />
			<variable id="27" name="version" type="long" />
		</bean>
		<beankey name="Key">
			<enum name="Enum1" value="4" />
			<variable id="1" default="1" name="s" type="short" /> com 2
			com 2
		</beankey>

		<protocol name="Protocol1" argument="Value" handle="server,clientscript" />
		<protocol name="Protocol3" argument="demo.Module2.Value" handle="server,clientscript" />
		<rpc name="Rpc1" argument="Value" result="Value" handle="server" />
		<rpc name="Rpc2" argument="Value" result="Value" handle="clientscript" />

		<table name="Table1" key="long" value="Value" memory="false" autokey="true" />
		<table name="Table2" key="Key" value="Value" memory="false" />
		<table name="Table3" key="long" value="Value" memory="false" />
		<table name="TableImportant" key="long" value="Value" />

		<table name="Table4" key="long" value="Value" memory="true" gen="client" autokey="true" />
		<protocol name="ProtocolNoProcedure" NoProcedure="true" handle="server" />
		<table name="tFlush" key="long" value="Value" memory="false" />
		<module name="Module11" id="3">
		</module>
	</module>

	<module name="Module2" id="2">
		<bean name="Value">
			<variable id="1" default="1" name="s" type="int" /> com aa
		</bean>
	</module>

	<!--
	name 项目名字
	gendir 代码生成输出目录，默认是当前目录
	GenTables 选择生成哪些表格（Table），如果为空，那就生成那些没有配置gen属性的table，可以用','分开指定多个名字
	-->
	<project name="gsd" GenDir="gsd/Gen" SrcDir="gsd" platform="cs" GenTables="" MappingClass="true">
		<!--
		这里引用的模块不该定义协议，定义了也不会被生成，一般为纯逻辑或者数据库模块。
		<module ref="Module2"/>
		-->
		<!-- service 生成到 solution 名字空间下 -->
		<service name="Server" handle="server" base="Zeze.Services.HandshakeServer">
			<module ref="Module1" />
		</service>
		<ModuleStartOrder>
			<start module="demo.Module1.Module11" />
		</ModuleStartOrder>
	</project>

	<project name="csharp" GenDir="../lua/csharp/msg" SrcDir="../lus/csharp/module" platform="luaclient" GenTables="client">
		<service name="Client" handle="clientscript" base="Zeze.Services.ToLuaServiceClient2">
			<module ref="Module1" />
		</service>
	</project>

	<project name="cxx" GenDir="../lua/cxx/Gen" SrcDir="../lua/cxx" GenTables="None" platform="cxx+lua">
		<service name="Client" handle="clientscript">
			<module ref="Module1" />
		</service>
	</project>

	<project name="TypeScript" GenDir="../TypeScript" SrcDir="../TypeScript" GenTables="client" platform="ts">
		<service name="Client" handle="clientscript">
			<module ref="Module1" />
		</service>
	</project>

	<project name="ZezeUnity" GenDir="../../ZezeUnity/ts" SrcDir="../../ZezeUnity/ts" GenTables="client" platform="cs+ts">
		<service name="Client" handle="clientscript">
			<module ref="Module1" />
		</service>
	</project>

	<project name="ZezeUnreal" gendir="../.." scriptdir="ts" GenTables="client" platform="ts">
		<service name="Client" handle="clientscript">
			<module ref="Module1" />
		</service>
	</project>
</solution>
