{{-
    func toname(name)
        ret message_namespace + '.' + name
    end
-}}
{{- func beantype(type)
        ret type?.full_name ?? "EmptyBean"
    end
-}}

{{-func typestr(type)
    case type.name
    when "binary"
        ret "userdata"
    when "bool"
        ret "boolean"
    when "double", "float"
        ret "number"
    when "int", "short", "byte"
        ret "integer"
    when "long"
        ret "long"
    when "string"
        ret "string"
    when "map" -}}
        table<{{ typestr type.key_type }}, {{ typestr type.value_type}}>
    {{- when "list","set" }}table<{{typestr type.value_type}}>
    {{- when "dynamic" }}
        {{- if variable.variable_type.real_beans.empty? }}
            {{ any }}
        {{- else}}
            {{- for real_bean_kv in variable.variable_type.real_beans}}{{if !for.first}}|{{end}}{{toname(real_bean_kv.value.full_name)}}
            {{- end}}
        {{- end}}
    {{- else
        ret toname(type.full_name?? type)
    end
end}}

{{-func defaultvalue(variable)
    case variable.variable_type.name
    when "bool"
        if variable.initial != ''
            ret string.downcase(variable.initial)
        else
            ret 'false'
        end
    when 'binary'
        ret 'nil'
    when "double", "float"
        if variable.initial != ''
            ret variable.initial
        else
            ret "0.0"
        end
    when "int", "short", "byte"
        if variable.initial !=''
            ret variable.initial
        else
            ret "0"
        end
    when "long"
        if variable.initial !=''
            ret variable.initial
        else
            ret "0"
        end
    when "string"
        if variable.initial !=''
            ret variable.initial
        else
            ret "''"
        end
    when "map",'list', 'set'
        ret "{}"
    when 'dynamic'
        ret 'message_init._default_empty_bean'
    end
end}}

{{- l = array.add_range beankeys beans }}
local message_core = require '{{lua_util_dir}}.message_core'
local message_init = require '{{message_namespace}}.message_init'

local {{module.name}} = {}
{{ for bean in l }}
---@class {{toname bean.full_name}} : {{message_namespace}}.Bean
{{- for e in  bean.enums}}
---@field {{e.name}} integer
{{- end }}
{{- for variable in bean.variables }}
---@field {{variable.name}} {{ typestr(variable.variable_type) }}
{{- end }}
---@field new fun(t: table):{{toname bean.full_name}}
{{module.name}}.{{bean.name}} = {
    __type_name__ = '{{bean.full_name}}',
    __type_id__ = '{{bean.type_id}}',
    new = message_core.bean_new,
    {{- for e in  bean.enums}}
    {{e.name}} = {{e.value}},
    {{- end }}
    {{- for variable in bean.variables }}
    {{- d = defaultvalue variable
    if d}}
    {{variable.name}} = {{d}},
    {{-end}}
    {{- end }}
}
{{- bean_variables = []
for variable in bean.variables
    if variable.variable_type.is_bean || variable.variable_type.is_collection
        bean_variables = array.add(bean_variables, variable)
    end
end -}}
{{- if bean_variables.size > 0 }}
{{module.name}}.{{bean.name}}.__index = message_core.build_index({{module.name}}.{{bean.name}})
{{module.name}}.{{bean.name}}.__newindex = message_core.build_newindex({{module.name}}.{{bean.name}})
{{- else }}
{{module.name}}.{{bean.name}}.__index = {{module.name}}.{{bean.name}}
{{- end}}
{{end }}

{{- for protocol in protocols }}
---@class {{toname protocol.full_name}} : {{message_namespace}}.Protocol
---@field argument {{toname beantype(protocol.argument_type)}}
{{- if protocol.result}}
---@field result {{toname beantype(protocol.result_type)}}
---@field new fun(self: {{toname protocol.full_name}}, argument : table | nil):{{toname protocol.full_name}}
---@field send fun(self: {{toname protocol.full_name}}, handler: fun(response: {{toname beantype(protocol.result_type)}}))
{{- else}}
---@field new fun(self: {{toname protocol.full_name}}, argument : table | nil):{{toname protocol.full_name}}
---@field send fun(self: {{toname protocol.full_name}})
{{- end}}
{{- for e in  protocol.enums}}
---@field {{e.name}} integer
{{- end }}
{{module.name}}.{{protocol.name}} = {
    __type_name__ = '{{protocol.full_name}}',
    __type_id__ = '{{protocol.type_id}}',
    protocolId = {{protocol.id}},
    moduleId = {{protocol.space.id}},
    resultCode = 0,
    {{- if protocol.result}}
    send = message_core.send_rpc,
    resultCode = 0,
    isRequest = false,
    new = message_core.rpc_new,
    {{- else}}
    send = message_core.send,
    new = message_core.protocol_new,
    {{- end}}
    {{- for e in  protocol.enums}}
    {{e.name}} = {{e.value}},
    {{- end }}
}

{{module.name}}.{{protocol.name}}.__index = message_core.build_index({{module.name}}.{{protocol.name}})
{{module.name}}.{{protocol.name}}.__newindex = message_core.build_newindex({{module.name}}.{{protocol.name}})

{{- end }}
{{- for enum in module.enums }}
{{module.name}}.{{enum.name}} = {{enum.value}}
{{- end}}

function {{module.name}}.__reg__()
{{- for bean in l }}
{{- bean_variables = []
for variable in bean.variables
    if variable.variable_type.is_bean
        bean_variables = array.add(bean_variables, variable)
    end
end -}}
    {{- if bean_variables.size > 0 }}
    {{module.name}}.{{bean.name}}.__reg_beans = {}
        {{- for variable in bean_variables}}
    {{module.name}}.{{bean.name}}.__reg_beans.{{variable.name}} = message_init.{{variable.variable_type.full_name}}
        {{- end }}
    {{- end }}
{{- end }}
{{- for protocol in protocols }}
    {{module.name}}.{{protocol.name}}.__reg_beans = {}
    {{module.name}}.{{protocol.name}}.__reg_beans.argument = message_init.{{protocol.argument_type?.full_name ?? "EmptyBean"}}
    {{- if protocol.result}}
    {{module.name}}.{{protocol.name}}.__reg_beans.result = message_init.{{protocol.result_type?.full_name ?? "EmptyBean"}}
    {{- end}}
{{- end }}
end

return {{module.name}}