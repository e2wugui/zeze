{{-
    func toname(name)
        ret schema_namespace +'.' + name + 'Meta'
    end
-}}
{{-
use_empty = false
for protocol in protocols
    if protocol.argument_type == null
        use_empty = true
        break
    end
    if protocol.result
        if protocol.result_type == null
            use_empty = true
            break
        end
    end
end
-}}
local message = require '{{message_namespace}}.message'
local meta = { beans = {}, protocols = {}, structs = {} }

{{- if use_empty}}

meta.beans['EmptyBean'] = {
    name = 'EmptyBean',
    type_id = '0',
    metatable = message.EmptyBean,
    variables = {},
}
{{- end}}

meta.structs['vector2'] = {
    name = 'vector2',
    type_id = '8',
    metatable = message.vector2,
    variables = {
        x = { id = 1, type = 'float'},
        y = { id = 2, type = 'float'},
    },
}

meta.structs['vector2int'] = {
    name = 'vector2int',
    type_id = '9',
    metatable = message.vector2int,
    variables = {
        x = { id = 1, type = 'int'},
        y = { id = 2, type = 'int'},
    },
}

meta.structs['vector3'] = {
    name = 'vector3',
    type_id = '10',
    metatable = message.vector3,
    variables = {
        x = { id = 1, type = 'float'},
        y = { id = 2, type = 'float'},
        z = { id = 3, type = 'float'},
    },
}

meta.structs['vector3int'] = {
    name = 'vector3int',
    type_id = '11',
    metatable = message.vector3int,
    variables = {
        x = { id = 1, type = 'int'},
        y = { id = 2, type = 'int'},
        z = { id = 3, type = 'int'},
    },
}

meta.structs['vector4'] = {
    name = 'vector4',
    type_id = '12',
    metatable = message.vector4,
    variables = {
        x = { id = 1, type = 'float'},
        y = { id = 2, type = 'float'},
        z = { id = 3, type = 'float'},
        w = { id = 4, type = 'float'},
    },
}
{{ for module in modules }}
require('{{toname(module.full_name ?? module.name)}}').__reg__(meta)
{{- end }}
{{- for module in modules }}
package.loaded['{{toname(module.full_name)}}'] = nil
{{- end }}

return meta
